@startuml ProvideNetconfInterface
skinparam responseMessageBelowArrow true

title
MediatorManager /v1/provide-netconf-interface
end title

participant "MountingOrchestrator" as MO
participant "MM://v1/provide-mediator-instance" as MM
database "MM:APPDataFile" as AppData
participant "CC://v1/prepare-connection" as CC 
collections " *MIM://v1/list-mediator-instances" as MIMList
collections " *MIM://v1/dismantle-mediator-instances" as MIMDel
participant "EligibleMediatorVM MIM://v1/create-mediator-instances" as EligibleMediatorVM
participant "EATL://v1/record-service-request" as EATL

MO -> MM :
Note right MO
    {
    mount-name: "513250011",
    device-ip:"1.2.3.4",
    device-model:"MLTN"
    }
end note
activate MM #LightSteelBlue
group provideNetconfInterfacePreparesConnectionAtDevices
    MM -> CC
    == Case 1.1 : No response received from the ConnectionPreparation Application ==
    CC -X MM : no response
    MM -> MO : 532 Bad Gateway. Upstream server not responding.

    == Case 1.2 : Failed to Authenticate ConnectionPreparation Application ==
    CC -> MM : 401 UnAuthorized
    MM -> MO : 531 Bad Gateway. Authentication at upstream server failed.

    == Case 1.3 : Internal Server Error at ConnectionPreparation Application ==
    CC -> MM : 500 InternalServerError
    MM -> MO : 502 Bad Gateway.

    == Case 1.4 : Connection preparation is successful ==
    CC -> MM : 204 NoContent
end

Group provideNetconfInterfaceManagesExistingMediatorInstances
    Group ListMediatorInstances
        MM -> MIMList :
        MM --> EATL : Logs the xMIM client request to EATL
        note over MM
        In the retrieved list , filter 
        the instances with the expected 
        mount-name or device-ip
        end note
    end
    == Case 2.1 : device-ip already exist with a different mount-name ==
    MM -> MO : 409 "IP Address occupied by <mountname>“

    == Case 2.2 : mount-name already exist with a different device-ip ==
    Group PingTestOnDevice
        MM -> Device : Ping{$requestBody#device-ip}
        MM --> EATL : Logs the ping test request to EATL
        note over MM
            If Ping is successful
        end note
        MM -> MO : 409 "Operational management connection of <Mount-name> would be cut“
        note over MM
            Else If Ping is not successful
        end note
    end

    Group DeletesMediatorInstances
        MM -> MIMDel : 
        MM --> EATL : Logs the MIM client request to EATL
        note over MM
            Further proceed step in Case 2.3
        end note
    end

    == Case 2.3 : mount-name and device-ip doesnot exist ==
    Group PingTestOnDevice
        MM -> Device : Ping{$requestBody#device-ip}
        MM --> EATL : Logs the ping test request to EATL
        note over MM
            If Ping is not successful
        end note
        MM -> MO : 532 Bad Gateway. Upstream server not responding.
        note over MM
            Else If Ping is successful
        end note
    end
    Group  DeterminesMediatorInstanceManagerBasedOnEngineeringLimit
        MM -> APPData : Retrieves list of mediator vms templates 
        note left APPData
            [
                {
                "mediator-vm-template-name" : "SiaeTemplate",
                "vendor-name" : "Ericsson",
                "supported-device-kind" : ["ALCP2E"],
                "engineering-limit" : 3600,
                <b>"paired-mediator-vm-list" : ["vmsiae1"]
                },
                {
                "mediator-vm-template-name" : "EricssonTemplate",
                "vendor-name" : "Ericsson",
                "supported-device-kind" : ["MLTN"],
                "engineering-limit" : 3600,
                <b>"paired-mediator-vm-list" : ["EricssonMediatorVM"]
                },
                ---
                ---
            ]
        end note

        note over MM
         If no mediator VM available for the device model
         in the APPData
        end note

        MM -> MO : 503 Service Unavailable

        note over MM
         Else if mediator VM available for the device model,
         then determine the right Mediator VM
        end note

        note over MM
         let eligibleVMList = [];
        end note

        Group FilterEligibleVmsThatHasLimitsAvailable [repeat for all the mediator VM] 
            MM -> MIMList :
            MM --> Eatl : Logs the xMIM client request to EATL
            note over MM
                store the existingMediatorInstanceList.length
                If existingMediatorInstanceList.length < engineering-limit
                then 
                let eligibleVM = {"vm-name": "...", "existing-instance-count" : xx}
                eligibleVMList.push(eligibleVM);
            end note
        end 
    end
    note over MM
        If eligibleVMList.length == 0, then
    end note

    MM -> MO : 517 Insufficient storage
        
    Group CreatesMediatorInstance [needs to be repeated until creating a mediator instance]
        note over MM
        If eligibleVMList.length > 0, then
        find mediator VM with the lowest load
        end note

        MM -> EligibleMediatorVM :
        MM --> Eatl : Logs the xMIM client request to EATL

        == Case 2.3.1 : No response received from MIM ==
        EligibleMediatorVM -X MM :
        note over MM
        If no response received from MIM  
        end note
        MM -> MO : 532 Bad Gateway. Upstream server not responding.

        == Case 2.3.2 : Authentication failure with MIM ==
        EligibleMediatorVM -> MM : 401 UnAuthorized
        note over MM
        If Authentication failure at MIM 
        end note
        MM -> MO : 532 Bad Gateway. Upstream server not responding.

        == Case 2.3.3 : InternalServerError in MIM ==
        EligibleMediatorVM -> MM : 500 InternalServerError
        note over MM
        If InternalServerError at MIM 
        end note
        MM -> MO : 502 Bad Gateway.

        == Case 2.3.4 : Successful creation ==
        EligibleMediatorVM -> MM : 200 OK            
        note left EligibleMediatorVM
            {"mediator-instance-ip-address": '1.2.3.4'
            "mediator-instance-netconf-port": 1}
        end note
        
        MM -> MO : 200 OK.
        note left MM
            {"mediator-instance-ip-address": '1.2.3.4'
            "mediator-instance-netconf-port": 1}
        end note
    end
end

== Case 2.4 : mount-name and device-ip already exist for the Expected combination ==
MM -> MIMList :
MM --> EATL : Logs the xMIM client request to EATL
note over MM
    ExistingListOfMediatorInstance.includes(mount-name + device-ip)
end note
MM -> MO : 200 OK.
deactivate MM
note left MM
    {"mediator-instance-ip-address": '1.2.3.4'
    "mediator-instance-netconf-port": 1}
end note



